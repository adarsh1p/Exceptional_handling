# -*- coding: utf-8 -*-
"""Exceptional_handling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19HHbPoIR_1dLo4vcIZ9sQvBlfShyGkaS

## Exception Handling
In Python, an error is an issue in a program that causes it to stop running correctly. Errors can occur due to various reasons like syntax mistakes, logical issues, or unexpected conditions during execution.

# Types of Errors in Python
# 1.	Compile time / Syntax Errors:
o	Description: These occur when the Python parser is unable to understand a line of code due to incorrect syntax.

o	Example: Missing a colon after a loop or conditional statement.
"""

if True
    print("Hello")

"""## 2.	Logical Errors:
o	Description: These occur when the program runs without crashing but produces incorrect results. They are often due to mistakes in the logic or algorithm.

o	Example: Using the wrong operator in a mathematical calculation.

"""

total = 100 - 10 * 2  # The intended operation might have been (100 - 10) * 2
print(total)

"""## 3.	Runtime Errors:
o	Description: These occur during the execution of a program. Even if the code is syntactically correct, these errors can happen when the program runs.

o	Example: Dividing by zero or accessing an undefined variable.

"""

num1= int(input("enter the 1st number ?"))
num2= int(input("enter the 2nd number ?"))

result= num1/num2

print(result)

with open("any_nonexist_file.txt", "r") as file:
  data=file.read()
  print(data)

"""Exception: In Python, when a runtime error occurs, the system raises an exception. An exception is a specific type of error that disrupts the normal flow of a programâ€™s execution.

If an exception is not handled , it will cause the program to terminate and print an error message (traceback). If it is handled, the program can continue running without crashing.

## How to handle??

Try Except in Python

Try and Except statement is used to handle these errors within our code in Python. The try block is used to check some code for errors i.e the code inside the try block will execute when there is no error in the program. Whereas the code inside the except block will execute whenever the program encounters some error in the preceding try block.

## handling division by zero
"""

try:
    num1 = int(input("Enter the 1st number: "))
    num2 = int(input("Enter the 2nd number: "))

    result = num1 / num2

    print("The result is:", result)

except ZeroDivisionError:
    print("Error! Division by zero is not allowed.")

"""## handling file not found"""

try:
  with open("any_nonexist_file.txt", "r") as file:
    data=file.read()
    print(data)
except FileNotFoundError:
  print("Error: file not found")

"""## Can we handle more than one exception at a time? ->multiple exception at a time"""

try:
    num1 = int(input("Enter the 1st number: "))
    num2 = int(input("Enter the 2nd number: "))

    result = num1 / num2

    print("The result is:", result)

except ZeroDivisionError:
    print("Error! Division by zero is not allowed.")
except ValueError:
    print("Invalid input! Please enter a valid integer.")

"""## what if we dont have any prior info about the exception? -> catching any exception"""

try:
    num1 = int(input("Enter the 1st number: "))
    num2 = int(input("Enter the 2nd number: "))

    result = num1 / num2

    print("The result is:", result)

except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""## using "else" with try and except

The else block in a try-except structure is used to define code that should run only if the try block does not raise any exceptions. Essentially, the else block will execute if the try block completes successfully, meaning no exceptions were encountered.


 try:
    # Code that might raise an exception
    result = some_operation()

except SomeSpecificError:
    # Code to handle the specific exception
    print("An error occurred.")

else:
    # Code to run if no exceptions were raised in the try block
    print("Operation succeeded:", result)
"""

try:
    num1 = int(input("Enter the 1st number: "))
    num2 = int(input("Enter the 2nd number: "))
    result = num1 / num2  # This line might raise a ZeroDivisionError or ValueError

except ValueError:
    print("Invalid input! Please enter a valid integer.")

except ZeroDivisionError:
    print("Error! Division by zero is not allowed.")

else:
    # This block runs only if no exceptions were raised
    print("The division was successful. The result is:", result)

"""## Finally Keyword in Python
Python provides a keyword finally, which is always executed after the try and except blocks. The final block always executes after the normal termination of the try block or after the try block terminates due to some exceptions.
"""

'''try:
    # Some Code
except:
    # Executed if error in the
    # try block
else:
    # execute if no exception
finally:
    # Some code .....(always executed)'''

try:
    num1 = int(input("Enter the 1st number: "))
    num2 = int(input("Enter the 2nd number: "))
    result = num1 / num2  # This line might raise a ZeroDivisionError or ValueError

except ValueError:
    print("Invalid input! Please enter a valid integer.")

except ZeroDivisionError:
    print("Error! Division by zero is not allowed.")

else:
    # This block runs only if no exceptions were raised
    print("The division was successful. The result is:", result)

finally:
  print('execution is done')

try:
  with open("any_nonexist_file.txt", "r") as file:
    data=file.read()
    print(data)
except FileNotFoundError:
  print("Error: file not found")

finally:
    print("Finished attempting to read the file.")

"""## raise keyword
In Python, the raise keyword is used to manually raise an exception. This allows you to create and handle exceptions in your code, either to signal that something went wrong or to enforce certain conditions

syntax:- raise Exception("This is an error message")
"""

def check_age(age):
    if age < 18:
      #print("no access")
       raise ValueError("Age must be 18 or older.")
    else:
     return "Access granted"

try:
    user_age = int(input("Enter your age: "))
    print(check_age(user_age))
except ValueError as e:
    print(f"Error: {e}")





